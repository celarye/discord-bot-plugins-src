interface plugin-types {
    record supported-registrations {
        discord-events: supported-registrations-discord-events,
        scheduled-jobs: bool,
    }

    record supported-registrations-discord-events {
        message-create: bool,
        interaction-create: bool,
        thread-create: bool,
        thread-delete: bool,
        thread-list-sync: bool,
        thread-member-update: bool,
        thread-members-update: bool,
        thread-update: bool,
    }

    /// scheduled-jobs: tuple entry 0 is the id and entry 1 is a list of cron
    /// values.
    ///
    /// Down the line once map<K, V> gets introduced to the component model:
    /// 1. scheduled-jobs will rely on this instead of a
    /// list<tuple<string, list<string>>> to enforce unique scheduled job ids on
    /// the plugin level.
    /// 2. dependency-functions will rely on this instead of a list<string> to enforce
    /// unique dependency-function ids on the plugin level.
    /// [Relevant PR] in the component model repository.
    ///
    /// [Relevant PR]: https://github.com/WebAssembly/component-model/pull/554
    record registrations-response {
        discord-events: registrations-response-discord-events,
        scheduled-jobs: list<tuple<string, list<string>>>,
        dependency-functions: list<string>,
    }

    /// interaction-create-commands: tuple entry 0 is the ID and entry 1 is
    /// JSON, check the [Discord Application Command docs] for the structure.
    ///
    /// Down the line once map<K, V> gets introduced to the component model
    /// interaction-create-commands will rely on this instead of a
    /// list<tuple<string, list<u8>>> to enforce unique command IDs on the
    /// plugin level. [Relevant PR] in the component model repository.
    ///
    /// [Discord Application Command docs]: https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-structure
    /// [Relevant PR]: https://github.com/WebAssembly/component-model/pull/554
    record registrations-response-discord-events {
        interaction-create-commands: list<tuple<string, list<u8>>>,
        message-create: bool,
        thread-create: bool,
        thread-delete: bool,
        thread-list-sync: bool,
        thread-member-update: bool,
        thread-members-update: bool,
        thread-update: bool,
    }
}

interface plugin-functions {
    use plugin-types.{supported-registrations, registrations-response};
    use discord-types.{events as discord-events, requests as discord-requests};

    /// settings is JSON.
    registrations: func(settings: list<u8>, supported-registrations: supported-registrations) -> result<registrations-response, string>;
    shutdown: func() -> result<_, string>;

    discord-event: func(event: discord-events) -> result<_, string>;
    scheduled-job: func(job: string) -> result<_, string>;
    /// params and result Ok are JSON.
    dependency: func(function: string, params: list<u8>) -> result<list<u8>, string>;
}
